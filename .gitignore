# Compiled class file
package project_KeyValue;

import org.json.JSONException;
import org.json.JSONObject;

public class studData {
	public static void main(String[] args) throws JSONException  {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("firstName", "BILL");
		jsonObject.put("collegeName", "MOT");
		jsonObject.put("degree", "B.Tech");

                                JSONObject jsonObject = new JSONObject();
		jsonObject.put("firstName", "BOB");
		jsonObject.put("collegeName", "ABC");
		jsonObject.put("degree", "B.Tech");
		

                                JSONObject jsonObject = new JSONObject();
		jsonObject.put("firstName", "SAM");
		jsonObject.put("collegeName", "SEB");
		jsonObject.put("degree", "B.Tech");
		

		
		//Create Opreation
		System.out.println("CREATE"); 
		PrimaryData Datas = new PrimaryData(
				"C:\\Users\\AKSHAYA\\DataStore.txt");
		System.out.println(Datas.create("one", jsonObject, 55));
		System.out.println(Datas.create("one", jsonObject, 55));
		System.out.println(Datas.create("one", jsonObject));
		System.out.println(Datas.create("ABCDEFGHIJKLMNOPQRSTUVWXYZ123", new JSONObject()));
		try {
			Thread.sleep(5000);
		} 
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("AFTER WAIT"); //After sleep time
		jsonObject.put("pincode", "452005");
		System.out.println(Datas.create("two", jsonObject, 55));
		System.out.println(Datas.create("one", jsonObject));
		System.out.println(Datas.create("two", jsonObject, 55));
		
		//Read Operation
		System.out.println("READ"); 
		System.out.println(Datas.read("one"));
		System.out.println(Datas.read("two"));
		System.out.println(Datas.read("three"));
		System.out.println(Datas.read("ABCDEFGHIJKLMNOPQRSTUVWXYZ123"));
		try {
			Thread.sleep(5000);
		} 
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("AFTER WAIT"); //After sleep time
		System.out.println(Datas.read("one"));
		System.out.println(Datas.read("two"));
	
		//Delete Operation
		System.out.println("DELETE");
		System.out.println(Datas.delete("one"));
		System.out.println(Datas.delete("three"));
		System.out.println(Datas.delete("one"));
		System.out.println(Datas.delete("two"));
		System.out.println(Datas.delete("1234567890qwertyuiopasdfghjklzxcvbnm"));
	}
}





package project_KeyValue;

import org.json.JSONException;
import org.json.JSONObject;

public class studData {
	public static void main(String[] args) throws JSONException  {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("firstName", "BILL");
		jsonObject.put("collegeName", "MOT");
		jsonObject.put("degree", "B.Tech");

                                JSONObject jsonObject = new JSONObject();
		jsonObject.put("firstName", "BOB");
		jsonObject.put("collegeName", "ABC");
		jsonObject.put("degree", "B.Tech");
		

                                JSONObject jsonObject = new JSONObject();
		jsonObject.put("firstName", "SAM");
		jsonObject.put("collegeName", "SEB");
		jsonObject.put("degree", "B.Tech");
		

		
		//Create Opreation
		System.out.println("CREATE"); 
		PrimaryData Datas = new PrimaryData(
				"C:\\Users\\AKSHAYA\\DataStore.txt");
		System.out.println(Datas.create("one", jsonObject, 55));
		System.out.println(Datas.create("one", jsonObject, 55));
		System.out.println(Datas.create("one", jsonObject));
		System.out.println(Datas.create("ABCDEFGHIJKLMNOPQRSTUVWXYZ123", new JSONObject()));
		try {
			Thread.sleep(5000);
		} 
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("AFTER WAIT"); //After sleep time
		jsonObject.put("pincode", "452005");
		System.out.println(Datas.create("two", jsonObject, 55));
		System.out.println(Datas.create("one", jsonObject));
		System.out.println(Datas.create("two", jsonObject, 55));
		
		//Read Operation
		System.out.println("READ"); 
		System.out.println(Datas.read("one"));
		System.out.println(Datas.read("two"));
		System.out.println(Datas.read("three"));
		System.out.println(Datas.read("ABCDEFGHIJKLMNOPQRSTUVWXYZ123"));
		try {
			Thread.sleep(5000);
		} 
		catch (InterruptedException e) {
			e.printStackTrace();
		}
		System.out.println("AFTER WAIT"); //After sleep time
		System.out.println(Datas.read("one"));
		System.out.println(Datas.read("two"));
	
		//Delete Operation
		System.out.println("DELETE");
		System.out.println(Datas.delete("one"));
		System.out.println(Datas.delete("three"));
		System.out.println(Datas.delete("one"));
		System.out.println(Datas.delete("two"));
		System.out.println(Datas.delete("1234567890qwertyuiopasdfghjklzxcvbnm"));
	}
}







package project_KeyValue;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.management.ManagementFactory;
import java.util.Date;
import java.util.HashMap;

public class Data2 {
	
	public static String getProcessFlow() {
		String process_Flow = ManagementFactory.getRuntimeMXBean().getName();
		return process_Flow;
	}

	public static boolean isValidKeyValue(String keyName) {
		if (keyName.length() > 32) { //Maximum Key Length
			return false;
		}
		return true;
	}

	public static boolean isKeyPresent(String keyName, String fileLoc) {
		boolean isKeyPresent = false;
		ObjectInputStream o_InputStream = null;
		FileInputStream f_InputStream = null;
		ObjectOutputStream o_OutputStream = null;
		FileOutputStream f_OutputStream = null;
		HashMap<String, DataFile> data_Value = new HashMap<String, DataFile>();
		try {
			File fileName = new File(fileLoc);
			if (fileName.exists()) {
				o_InputStream = new ObjectInputStream(f_InputStream);
				f_InputStream = new FileInputStream(fileName);
				data_Value = (HashMap<String, DataFile>) o_InputStream.readObject();
				if (data_Value.containsKey(keyName)) {
					isKeyPresent = true;
				}
				o_InputStream.close();
				f_InputStream.close();
			}
			if (isKeyPresent) {
				DataFile dataName = data_Value.get(keyName);
				long presentDateMilliTime = new Date().getTime();
				if (dataName.getAliveTime() > 0
						&& (presentDateMilliTime - dataName
								.getCreationDateMilliTime()) >= (dataName
								.getAliveTime() * 1000)) { //1000-> Milliseconds
					data_Value.remove(keyName);
					f_OutputStream = new FileOutputStream(fileName);
					o_OutputStream = new ObjectOutputStream(f_OutputStream);
					o_OutputStream.writeObject(data_Value);
					f_OutputStream.close();
					o_OutputStream.close();
					isKeyPresent = false;
				}
			}
		} 
		catch (Exception E) {
			E.printStackTrace();
		} 
		finally {
			if (f_InputStream != null) {
				try {
					f_InputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (o_InputStream != null) {
				try {
					o_InputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return isKeyPresent;
	}

	public static boolean writeOperation(DataFile dataName, String fileLoc) {
		
		ObjectInputStream o_InputStream = null;
		FileInputStream f_InputStream = null;
		ObjectOutputStream o_OutputStream = null;
		FileOutputStream f_OutputStream = null;
		HashMap<String, DataFile> data_Value = null;
		try {
			File fileName = new File(fileLoc);
			if (fileName.exists()) {// Read existing file data
				f_InputStream = new FileInputStream(fileName);
				o_InputStream = new ObjectInputStream(f_InputStream);
				data_Value = (HashMap<String, DataFile>) o_InputStream.readObject();
				f_InputStream.close();
				o_InputStream.close();

				
				data_Value.put(dataName.getKey(), dataName);

				
				f_OutputStream = new FileOutputStream(fileName);
				o_OutputStream = new ObjectOutputStream(f_OutputStream);
				o_OutputStream.writeObject(data_Value);
				f_OutputStream.close();
				o_OutputStream.close();

				return true;
			}
			else {
				data_Value = new HashMap<String, DataFile>();
				data_Value.put(dataName.getKey(), dataName);

				
				f_OutputStream = new FileOutputStream(fileName);
				o_OutputStream = new ObjectOutputStream(f_OutputStream);
				o_OutputStream.writeObject(data_Value);
				f_OutputStream.close();
				o_OutputStream.close();

				return true;
			}
		} 
		catch (Exception E) {
			return false;
		} 
		finally {
			if (f_InputStream != null) {
				try {
					f_InputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (o_InputStream != null) {
				try {
					o_InputStream.close();
				}
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (f_OutputStream != null) {
				try {
					f_OutputStream.close();
				}
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (o_OutputStream != null) {
				try {
					o_OutputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static DataFile readOperation(String keyName, String fileLoc) {
	
		ObjectInputStream o_InputStream = null;
		FileInputStream f_InputStream = null;
		HashMap<String, DataFile> data_Value = null;
		try {
			File fileName = new File(fileLoc);
			if (fileName.exists()) {
				
				f_InputStream = new FileInputStream(fileName);
				o_InputStream = new ObjectInputStream(f_InputStream);
				data_Value = (HashMap<String, DataFile>) o_InputStream.readObject();

				f_InputStream.close();
				o_InputStream.close();
				return data_Value.get(keyName);
			} 
			else {
				return null;
			}
		} 
		catch (Exception E) {
			E.printStackTrace();
			return null;
		} 
		finally {
			if (f_InputStream != null) {
				try {
					f_InputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (o_InputStream != null) {
				try {
					o_InputStream.close();
				}
				catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static boolean deleteOperation(String keyName, String fileLoc) {

		ObjectInputStream o_InputStream = null;
		FileInputStream f_InputStream = null;
		ObjectOutputStream o_OutputStream = null;
		FileOutputStream f_OutputStream = null;
		HashMap<String, DataFile> data_Value = null;
		try {
			File fileName = new File(fileLoc);
			if (fileName.exists()) {// Read existing file data
				f_InputStream = new FileInputStream(fileName);
				o_InputStream = new ObjectInputStream(f_InputStream);
				data_Value = (HashMap<String, DataFile>) o_InputStream.readObject();

				f_InputStream.close();
				o_InputStream.close();

				
				data_Value.remove(keyName);

				
				f_OutputStream = new FileOutputStream(fileName);
				o_OutputStream = new ObjectOutputStream(f_OutputStream);
				o_OutputStream.writeObject(data_Value);
				f_OutputStream.close();
				o_OutputStream.close();

				return true;
			}
			return false;
		} 
		catch (Exception E) {
			return false;
		} 
		finally {
			if (f_InputStream != null) {
				try {
					f_InputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (o_InputStream != null) {
				try {
					o_InputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (f_OutputStream != null) {
				try {
					f_OutputStream.close();
				}
				catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (o_OutputStream != null) {
				try {
					o_OutputStream.close();
				} 
				catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}
}






package project_KeyValue;

import java.io.Serializable;

import org.json.JSONObject;

public class DataFile implements Serializable {
	
	private static final long serialVersionUID = 1L;
	String keyName;
	int AliveTime;
	JSONObject valueName;
	long creationDateMilliTime;

	public String getKey() {
		return keyName;
	}

	public void setKey(String keyName) {
		this.keyName = keyName;
	}

	public JSONObject getValue() {
		return valueName;
	}

	public void setValue(JSONObject valueName) {
		this.valueName = valueName;
	}
	
	public int getAliveTime() {
		return AliveTime;
	}

	public void setAliveTime(int AliveTime) {
		this.AliveTime = AliveTime;
	}

	public long getCreationDateMilliTime() {
		return creationDateMilliTime;
	}

	public void setCreationDateMilliTime(long creationDateMilliTime) {
		this.creationDateMilliTime = creationDateMilliTime;
	}

}


